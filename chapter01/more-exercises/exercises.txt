Exercise 1-20: 'Detab'
	Write a program `detab` that replaces tabs in the input with the proper
	number of blanks to space to the next tab stop. Assume a fixed set of
	tab stops, say every n coloumns. Should n be a variable or a symbolic
	parameter?

Exercise 1-21: 'Entab'
	Write a program `entab` that replaces strings of blanks by the minimum
	number of tabs and blanks to achieve the same spacing. Use the same tab
	stops as for `detab`. When either a tab or a single blank would suffice
	to reach a tab stop, which should be given preference?

Exercise 1-22: 'Fold long lines'
	Write a program to "fold" long input lines into two or more shorter
	lines after the last non-blank character that occurs before the n-th
	column of input. Make sure your porgram does something intelligent with
	very long lines, and if there are no blanks or tabs before the specified
	column.

Exercise 1-23: 'C comment remover'
	Write a program to remove all comments from a C program. Don't forget
	to handle quoted strings and character constants properly. C comments
	do not nest.

Exercise 1-24: 'C syntax chcker'
	Write a program to check a C program for rudimentary syntax errors like
	unbalanced parentheses, brackets, braces. Don't forget about quotes,
	both single and double, escape sequences, and comments (This program
	is hard if you do it in full generality.)

